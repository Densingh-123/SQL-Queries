create database user;
use user;

-- Create the table with email and phone number
CREATE TABLE data (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50),
    age INT,
    city VARCHAR(50),
    email VARCHAR(100),
    phone_number VARCHAR(15)
);

-- Insert data with duplicates
INSERT INTO data (name, age, city, email, phone_number) VALUES 
(null, 25, 'New York', null, '1234-345'),
('Bob', null, 'Los Angeles', null, '234-567-8901'),
('Charlie', 35, 'Chicago', 'charlie@example.com', '345-678-9012'),
('Alice', 25, 'New York', 'alice@example.com', '123-456-7890'), -- Duplicate
('Eve', 28, 'San Francisco', 'eve@example.com', '456-789-0123'),
('David', 40, 'Seattle', null, '567-890-1234'),
('Frank', 33, 'Denver', 'frank@example.com', '678-901-2345'),
('Bob', 30, 'Los Angeles', 'bob@example.com', '234-567-8901'), -- Duplicate
('Grace', 29, 'Austin', 'grace@example.com', '789-012-3456'),
('Helen', 27, 'Boston', 'helen@example.com', '890-123-4567'),
('Charlie', 35, 'Chicago', 'charlie@example.com', '345-678-9012'), -- Duplicate
('Ivy', 26, 'San Diego', 'ivy@example.com', '901-234-5678'),
('Jack', 31, 'Dallas', 'jack@example.com', '012-345-6789'),
('Eve', 28, 'San Francisco', 'eve@example.com', '456-789-0123'), -- Duplicate
('Kevin', 36, 'Houston', 'kevin@example.com', '123-789-4560'),
('Linda', 32, 'Philadelphia', 'linda@example.com', '234-890-5671'),
('Jack', 31, 'Dallas', 'jack@example.com', '012-345-6789'), -- Duplicate
('Mike', 29, 'Atlanta', 'mike@example.com', '345-901-6782'),
('Nancy', 34, 'Miami', 'nancy@example.com', '456-012-7893'),
('David', 40, 'Seattle', 'david@example.com', '567-890-1234'); 

select * from data;
drop table data;
select * ,case 
when email and phone_number is null then '999'
when email is null then phone_number else email 
end as contact from data;
select count(*) from data where email is null;
select * from data where name is null or email is null or age is null;
select name ,age, coalesce(name,'user') from data ;
-- string handling
select 
length(name) as name_length ,
upper(city) as city_upper,
lower(name) as name,
concat(name,' - ',city) as user_data,
substring(name,1,3) as sub,
trim('   chennai   ')as trimmed_city,
rpad(name,8,'*')as left_padding,
replace(email,'@','$')as edited_mail,
instr(name,'a') as pos_a,
left(name,5)as first_5_char,
reverse(name)as customer_rev,
format(phone_number,3)as number
from data;
-- subQueries

-- Create the product table
CREATE TABLE product (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    number VARCHAR(20),
    cost DECIMAL(10,2),
    email VARCHAR(100),
    age INT,
    city VARCHAR(50)
);

-- Insert data with duplicates
INSERT INTO product (name, number, cost, email, age, city) VALUES 
('Laptop', '101', 1200.50, 'store@example.com', 2, 'New York'),
('Smartphone', '102', 800.00, 'shop@example.com', 1, 'Los Angeles'),
('Headphones', '103', 150.75, 'audio@example.com', 1, 'Chicago'),
('Laptop', '101', 1200.50, 'store@example.com', 2, 'New York'), -- Duplicate
('Tablet', '104', 600.25, 'tablet@example.com', 1, 'San Francisco'),
('Camera', '105', 950.90, 'photo@example.com', 3, 'Seattle'),
('Smartwatch', '106', 300.00, 'wearable@example.com', 1, 'Denver'),
('Smartphone', '102', 800.00, 'shop@example.com', 1, 'Los Angeles'), -- Duplicate
('Monitor', '107', 220.45, 'display@example.com', 2, 'Austin'),
('Keyboard', '108', 75.00, 'accessories@example.com', 1, 'Boston'),
('Headphones', '103', 150.75, 'audio@example.com', 1, 'Chicago'), -- Duplicate
('Mouse', '109', 50.99, 'tech@example.com', 1, 'San Diego'),
('Printer', '110', 400.80, 'office@example.com', 2, 'Dallas'),
('Tablet', '104', 600.25, 'tablet@example.com', 1, 'San Francisco'), -- Duplicate
('Router', '111', 120.00, 'network@example.com', 1, 'Houston'),
('Speaker', '112', 180.60, 'sound@example.com', 1, 'Philadelphia'),
('Printer', '110', 400.80, 'office@example.com', 2, 'Dallas'), -- Duplicate
('USB Drive', '113', 25.99, 'storage@example.com', 1, 'Atlanta'),
('External HDD', '114', 150.00, 'backup@example.com', 2, 'Miami'),
('Camera', '105', 950.90, 'photo@example.com', 3, 'Seattle'); -- Duplicate

select name ,
(select max(cost)from product)as max_price
from product;

-- view

create view high_price as
select name,cost,email from product where cost>1000;

select * from high_price;


-- join

-- Create the restaurant table
CREATE TABLE restaurant (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    location VARCHAR(100),
    email VARCHAR(100),
    phone_number VARCHAR(15),
    rating DECIMAL(2,1) CHECK (rating >= 0 AND rating <= 5)
);

-- Insert sample restaurant data
INSERT INTO restaurant (name, location, email, phone_number, rating) VALUES 
('Tasty Bites', 'New York', 'contact@tastybites.com', '123-456-7890', 4.5),
('Golden Spoon', 'Los Angeles', 'info@goldenspoon.com', '234-567-8901', 4.8),
('Spicy Delight', 'Chicago', 'hello@spicydelight.com', '345-678-9012', 4.2),
('Urban Eats', 'San Francisco', 'contact@urbaneats.com', '456-789-0123', 4.7),
('Food Fusion', 'Seattle', 'support@foodfusion.com', '567-890-1234', 4.3);


-- Create the order table
CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    restaurant_id INT,
    customer_name VARCHAR(100),
    food_item VARCHAR(100),
    quantity INT CHECK (quantity > 0),
    total_cost DECIMAL(10,2),
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (restaurant_id) REFERENCES restaurant(id) ON DELETE CASCADE
);

-- Insert sample order data
INSERT INTO orders (restaurant_id, customer_name, food_item, quantity, total_cost) VALUES 
(1, 'John Doe', 'Cheeseburger', 2, 15.99),
(2, 'Jane Smith', 'Pasta Alfredo', 1, 12.50),
(3, 'Michael Brown', 'Spicy Tacos', 3, 18.75),
(4, 'Sarah Johnson', 'Grilled Salmon', 2, 25.99),
(5, 'David Wilson', 'Sushi Platter', 1, 22.99),
(1, 'Emily Davis', 'Veggie Pizza', 1, 10.99),
(2, 'James Miller', 'Caesar Salad', 2, 8.99),
(3, 'Sophia White', 'Buffalo Wings', 1, 9.50),
(4, 'Daniel Martinez', 'BBQ Ribs', 2, 19.99),
(5, 'Olivia Taylor', 'Chocolate Cake', 1, 6.99);
 
 select restaurant_id,name,location,email,customer_name,food_item,quantity,total_cost,order_date from restaurant r
 left join orders o on r.id=o.id;
 
